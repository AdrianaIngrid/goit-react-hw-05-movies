{"version":3,"file":"static/js/134.075a8dc0.chunk.js","mappings":"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","sources":["components/API/Api.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\nexport  const API_KEY_TMDB = '1c6932c63db86d0dbc05ca527fa0b6a9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nexport const imageBaseUrl = 'https://image.tmdb.org/t/p/w200';\n\nexport const getMovieDetails = async (movieId) => {\ntry {\n    const response = await axios.get(`movie/${movieId}?language=en-US`, {\n        params: {\n        api_key: API_KEY_TMDB,\n        },\n    });\n    return response.data;\n} catch (error) {\n    throw new Error('Eroare la preluarea detaliilor filmului');\n}\n};\nexport const getCastDetails = async (movieId) => {\n    try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n          {\n            params: {\n              api_key: API_KEY_TMDB,\n            },\n          }\n        );\n        return response.data.cast; \n    } catch (error) {\n        throw new Error(\"Eroare la preluareea membrilor din casting\");\n        \n    }\n\n};\nexport const getReviews = async (movieId) => {\n    try {\n        const response = await axios.get(\n            `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US`,\n            {\n                params: {\n                    api_key: API_KEY_TMDB,\n                },\n            }\n        );\n     \n        return response.data;\n       \n    } catch (error) {\n        throw new Error('Eroare la preluareea review-urilor');\n    }\n};\n","import { React, useState } from \"react\";\nimport { API_KEY_TMDB } from \"components/API/Api\";\nimport axios from \"axios\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nconst MovieTitle = styled.p`\nfont-size: 18px;\n\n\n`;\nconst SearchButton = styled.button`\n  padding: 8px 10px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n  border-style: inset;\n  border-color: grey;\n  background-color: blue;\n`;\nconst InputSearch = styled.input`\n  padding: 8px 40px;\n \n  \n  \n\n`;\nconst Movies = () => {\n    const location = useLocation();\n    const [query, setQuery] = useState('');\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [movies, setMovies] = useState([]);\n\n    const handleSearch = async (event) => {\n        event.preventDefault();\n        if (!query) return;\n        try {\n            setLoading(true);\n            setError(null);\n            const response = await axios.get(`search/movie`,{\n                params: {\n                    api_key: API_KEY_TMDB,\n                    query: query,\n                },\n            });\n          setMovies(response.data.results);\n        \n            \n        } catch (error) {\n            setError(\"Eroare la preluarea datelor\", error);\n            \n        } finally {\n            setLoading(false);\n        }\n    };\n    return (\n      <div>\n        <form onSubmit={handleSearch}>\n          <InputSearch\n            type=\"text\"\n            value={query}\n            onChange={evt => setQuery(evt.target.value)}\n            placeholder=\"Search for a movie\"\n          />\n          <SearchButton type=\"submit\">Search</SearchButton>\n        </form>\n        {loading && <p>Loading...</p>}\n        {error && <p>{error}</p>}\n        <ol>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                <MovieTitle>{movie.title}</MovieTitle>\n                         </Link>\n            </li>\n          ))}\n        </ol>\n      </div>\n    );\n\n};\nexport default Movies;"],"names":["API_KEY_TMDB","axios","imageBaseUrl","getMovieDetails","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","movieId","response","_context","prev","next","concat","params","api_key","sent","abrupt","data","t0","Error","stop","_x","apply","arguments","getCastDetails","_ref2","_callee2","_context2","cast","_x2","getReviews","_ref3","_callee3","_context3","_x3","MovieTitle","styled","_templateObject","_taggedTemplateLiteral","SearchButton","_templateObject2","InputSearch","_templateObject3","location","useLocation","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","error","setError","_useState5","_useState6","loading","setLoading","_useState7","_useState8","movies","setMovies","handleSearch","event","preventDefault","results","finish","_jsxs","children","onSubmit","_jsx","type","value","onChange","evt","target","placeholder","map","movie","Link","to","id","state","from","title"],"sourceRoot":""}